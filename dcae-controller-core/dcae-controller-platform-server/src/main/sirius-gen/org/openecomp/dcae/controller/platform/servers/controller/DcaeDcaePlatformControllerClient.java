
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.platform.servers.controller;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.dcae.controller.platform.controller.impl.DcaePlatformControllerImpl;
import org.openecomp.dcae.controller.platform.controller.ControllerPackage;
import org.openecomp.dcae.controller.platform.servers.controller.logging.DcaePlatformControllerOperationEnum;
import org.openecomp.dcae.controller.platform.servers.controller.logging.DcaePlatformControllerMessageEnum;





 
@SuppressWarnings("unchecked")
public class DcaeDcaePlatformControllerClient extends DcaePlatformControllerImpl {
	public static final Logger logger = Logger.getLogger(DcaeDcaePlatformControllerClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public DcaeDcaePlatformControllerClient(String file, String name) {
		DcaeDcaePlatformController.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}

	public DcaeDcaePlatformControllerClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}
	
	public DcaeDcaePlatformControllerClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}



	@Override
	public void deployDescriptor(java.lang.String name) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_deployDescriptor,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "deployDescriptor", null, name);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_deployDescriptor, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_deployDescriptor,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_deployDescriptor,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void refreshDataBus(java.lang.String nameMatch) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_refreshDataBus,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "refreshDataBus", null, nameMatch);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_refreshDataBus, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_refreshDataBus,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_refreshDataBus,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void logs(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.logs.LogMessage> logs) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_logs,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "logs", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,logs);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_logs, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_logs,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_logs,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void metrics(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.metrics.Metric> metrics) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_metrics,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "metrics", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,metrics);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_metrics, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_metrics,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_metrics,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void properties(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.properties.AbstractProperty> l) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_properties,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "properties", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,l);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_properties, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_properties,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_properties,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void uploadInfo(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.server.ManagementInfo> info) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_uploadInfo,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "uploadInfo", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,info);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_uploadInfo, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_uploadInfo,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_uploadInfo,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValues(org.json.JSONObject cx, java.lang.String path, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_getValues,client.getRemote());
		EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.metrics.DoubleMetric>) client.operationPath("/resources", c, "getValues", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,path,start,end,option,relativeInterval);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getValues, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getValues,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getValues,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValuesAll(org.json.JSONObject cx, java.lang.String path, EList<java.lang.String> metrics, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_getValuesAll,client.getRemote());
		EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.metrics.DoubleMetric>) client.operationPath("/resources", c, "getValuesAll", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,path,metrics,start,end,option,relativeInterval);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getValuesAll, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getValuesAll,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getValuesAll,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public EList<org.openecomp.ncomp.core.logs.LogMessage> getMessages(org.json.JSONObject cx, java.lang.String path, java.lang.Long start, java.lang.Long end) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_getMessages,client.getRemote());
		EList<org.openecomp.ncomp.core.logs.LogMessage> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.logs.LogMessage>) client.operationPath("/resources", c, "getMessages", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,path,start,end);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getMessages, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getMessages,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getMessages,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.ncomp.sirius.manager.server.LoggerInfo getRequestLogger(java.lang.String userName, java.lang.String action, java.lang.String resourcePath, org.json.JSONObject context) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_getRequestLogger,client.getRemote());
		org.openecomp.ncomp.sirius.manager.server.LoggerInfo res;
		try {
		  res = (org.openecomp.ncomp.sirius.manager.server.LoggerInfo) client.operationPath("/resources", c, "getRequestLogger", null, userName,action,resourcePath,context);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getRequestLogger, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getRequestLogger,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_getRequestLogger,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public EList<org.openecomp.ncomp.core.function.ValuePair> evaluate(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_evaluate,client.getRemote());
		EList<org.openecomp.ncomp.core.function.ValuePair> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.function.ValuePair>) client.operationPath("/resources", c, "evaluate", null, path,function);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_evaluate, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_evaluate,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_evaluate,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void update(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {
		EClass c = ControllerPackage.eINSTANCE.getDcaePlatformController(); 
		ecomplogger.recordMetricEventStart(DcaePlatformControllerOperationEnum.DcaePlatformController_update,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "update", null, path,function);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_update, e.toString());
			EcompException e1 = EcompException.create(DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_update,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaePlatformControllerMessageEnum.REMOTE_CALL_FAILED_update,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

}
