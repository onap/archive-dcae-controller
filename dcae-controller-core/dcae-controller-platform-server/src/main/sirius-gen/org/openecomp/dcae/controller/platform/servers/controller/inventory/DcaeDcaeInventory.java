
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.platform.servers.controller.inventory;





import java.io.InputStream;

import org.openecomp.ncomp.sirius.manager.IRequestHandler;
import org.openecomp.ncomp.sirius.manager.ISwaggerHandler;
import org.openecomp.ncomp.sirius.manager.ISiriusPlugin;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;
import org.openecomp.ncomp.sirius.manager.ISiriusProvider;
import org.openecomp.ncomp.sirius.manager.ManagementServer;
import org.openecomp.ncomp.sirius.manager.SwaggerUtils;
import org.openecomp.ncomp.sirius.function.FunctionUtils;
import org.openecomp.ncomp.component.ApiRequestStatus;

import org.apache.log4j.Logger;

import org.openecomp.ncomp.sirius.manager.logging.NcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.json.JSONObject;

import java.util.Date;

import org.openecomp.dcae.controller.platform.servers.controller.inventory.logging.DcaeInventoryOperationEnum;
import org.openecomp.dcae.controller.platform.servers.controller.inventory.logging.DcaeInventoryMessageEnum;




import org.openecomp.dcae.controller.inventory.impl.DcaeInventoryImpl;



public class DcaeDcaeInventory extends DcaeInventoryImpl implements ISiriusProvider {
	public static final Logger logger = Logger.getLogger(DcaeDcaeInventory.class);
	static final NcompLogger ecomplogger = NcompLogger.getNcompLogger();
	public DcaeDcaeInventoryProvider controller;
	ISiriusServer server;

	public DcaeDcaeInventory(ISiriusServer server) {
		this.server = server;
		this.controller = new DcaeDcaeInventoryProvider(server,this);
	}

	public org.openecomp.dcae.controller.inventory.DcaeServiceTypeResults getDcaeServiceTypes(java.lang.String typeName, java.lang.Boolean onlyLatest, java.lang.Boolean onlyActive, java.lang.String vnfType, java.lang.String serviceId, java.lang.String serviceLocation, java.lang.String asdcServiceId, java.lang.String asdcResourceId, java.lang.Integer offset) {
		org.openecomp.dcae.controller.inventory.DcaeServiceTypeResults res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServiceTypes", ApiRequestStatus.START, duration_,typeName,onlyLatest,onlyActive,vnfType,serviceId,serviceLocation,asdcServiceId,asdcResourceId,offset);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServiceTypes,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServiceTypes,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.getDcaeServiceTypes(typeName,onlyLatest,onlyActive,vnfType,serviceId,serviceLocation,asdcServiceId,asdcResourceId,offset);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getDcaeServiceTypes", ApiRequestStatus.ERROR, duration_,typeName,onlyLatest,onlyActive,vnfType,serviceId,serviceLocation,asdcServiceId,asdcResourceId,offset);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServiceTypes, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServiceTypes,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServiceTypes, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServiceTypes", ApiRequestStatus.OKAY, duration_,typeName,onlyLatest,onlyActive,vnfType,serviceId,serviceLocation,asdcServiceId,asdcResourceId,offset);
		return res;
	}

	public org.openecomp.dcae.controller.inventory.ApiResponseMessage deleteDcaeServiceTypesType(java.lang.String typeId) {
		org.openecomp.dcae.controller.inventory.ApiResponseMessage res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteDcaeServiceTypesType", ApiRequestStatus.START, duration_,typeId);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_deleteDcaeServiceTypesType,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_deleteDcaeServiceTypesType,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.deleteDcaeServiceTypesType(typeId);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteDcaeServiceTypesType", ApiRequestStatus.ERROR, duration_,typeId);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_deleteDcaeServiceTypesType, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_deleteDcaeServiceTypesType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_deleteDcaeServiceTypesType, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteDcaeServiceTypesType", ApiRequestStatus.OKAY, duration_,typeId);
		return res;
	}

	public org.openecomp.dcae.controller.inventory.DCAEServiceType getDcaeServiceTypesType(java.lang.String typeId) {
		org.openecomp.dcae.controller.inventory.DCAEServiceType res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServiceTypesType", ApiRequestStatus.START, duration_,typeId);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServiceTypesType,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServiceTypesType,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.getDcaeServiceTypesType(typeId);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getDcaeServiceTypesType", ApiRequestStatus.ERROR, duration_,typeId);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServiceTypesType, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServiceTypesType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServiceTypesType, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServiceTypesType", ApiRequestStatus.OKAY, duration_,typeId);
		return res;
	}

	public org.openecomp.dcae.controller.inventory.DCAEServiceType createDcaeServiceTypesTypeName(org.openecomp.dcae.controller.inventory.DCAEServiceTypeRequest body) {
		org.openecomp.dcae.controller.inventory.DCAEServiceType res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createDcaeServiceTypesTypeName", ApiRequestStatus.START, duration_,body);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_createDcaeServiceTypesTypeName,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_createDcaeServiceTypesTypeName,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createDcaeServiceTypesTypeName(body);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createDcaeServiceTypesTypeName", ApiRequestStatus.ERROR, duration_,body);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_createDcaeServiceTypesTypeName, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_createDcaeServiceTypesTypeName,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_createDcaeServiceTypesTypeName, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createDcaeServiceTypesTypeName", ApiRequestStatus.OKAY, duration_,body);
		return res;
	}

	public org.openecomp.dcae.controller.inventory.DcaeServiceResults getDcaeServices(java.lang.String typeId, java.lang.String vnfId, java.lang.String vnfType, java.lang.String vnfLocation, java.lang.String componentType, java.lang.Boolean shareable, java.lang.String created, java.lang.Integer offset) {
		org.openecomp.dcae.controller.inventory.DcaeServiceResults res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServices", ApiRequestStatus.START, duration_,typeId,vnfId,vnfType,vnfLocation,componentType,shareable,created,offset);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServices,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServices,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.getDcaeServices(typeId,vnfId,vnfType,vnfLocation,componentType,shareable,created,offset);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getDcaeServices", ApiRequestStatus.ERROR, duration_,typeId,vnfId,vnfType,vnfLocation,componentType,shareable,created,offset);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServices, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServices,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServices, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServices", ApiRequestStatus.OKAY, duration_,typeId,vnfId,vnfType,vnfLocation,componentType,shareable,created,offset);
		return res;
	}

	public org.openecomp.dcae.controller.inventory.DCAEServiceGroupByResults getDcaeServicesGroupbyPropertyName(java.lang.String propertyName) {
		org.openecomp.dcae.controller.inventory.DCAEServiceGroupByResults res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServicesGroupbyPropertyName", ApiRequestStatus.START, duration_,propertyName);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServicesGroupbyPropertyName,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServicesGroupbyPropertyName,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.getDcaeServicesGroupbyPropertyName(propertyName);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getDcaeServicesGroupbyPropertyName", ApiRequestStatus.ERROR, duration_,propertyName);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServicesGroupbyPropertyName, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServicesGroupbyPropertyName,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServicesGroupbyPropertyName, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServicesGroupbyPropertyName", ApiRequestStatus.OKAY, duration_,propertyName);
		return res;
	}

	public void deleteDcaeServicesService(java.lang.String serviceId) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deleteDcaeServicesService", ApiRequestStatus.START, duration_,serviceId);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_deleteDcaeServicesService,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_deleteDcaeServicesService,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.deleteDcaeServicesService(serviceId);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deleteDcaeServicesService", ApiRequestStatus.ERROR, duration_,serviceId);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_deleteDcaeServicesService, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_deleteDcaeServicesService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_deleteDcaeServicesService, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deleteDcaeServicesService", ApiRequestStatus.OKAY, duration_,serviceId);
		
	}

	public org.openecomp.dcae.controller.inventory.DCAEService getDcaeServicesService(java.lang.String serviceId) {
		org.openecomp.dcae.controller.inventory.DCAEService res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServicesService", ApiRequestStatus.START, duration_,serviceId);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServicesService,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServicesService,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.getDcaeServicesService(serviceId);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getDcaeServicesService", ApiRequestStatus.ERROR, duration_,serviceId);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServicesService, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServicesService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_getDcaeServicesService, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getDcaeServicesService", ApiRequestStatus.OKAY, duration_,serviceId);
		return res;
	}

	public org.openecomp.dcae.controller.inventory.DCAEService createDcaeServicesService(java.lang.String serviceId, org.openecomp.dcae.controller.inventory.DCAEServiceRequest body) {
		org.openecomp.dcae.controller.inventory.DCAEService res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "createDcaeServicesService", ApiRequestStatus.START, duration_,serviceId,body);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_createDcaeServicesService,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_createDcaeServicesService,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.createDcaeServicesService(serviceId,body);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "createDcaeServicesService", ApiRequestStatus.ERROR, duration_,serviceId,body);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_createDcaeServicesService, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_createDcaeServicesService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_createDcaeServicesService, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "createDcaeServicesService", ApiRequestStatus.OKAY, duration_,serviceId,body);
		return res;
	}

	public void poll() {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "poll", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_poll,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_poll,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.poll();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "poll", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_poll, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_poll,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_poll, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "poll", ApiRequestStatus.OKAY, duration_);
		
	}

	public void updateConfiguration() {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "updateConfiguration", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(DcaeInventoryOperationEnum.DcaeInventory_updateConfiguration,server,this);
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_updateConfiguration,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.updateConfiguration();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "updateConfiguration", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaeInventoryMessageEnum.REQUEST_FAILED_updateConfiguration, e.toString());
			EcompException e1 =  EcompException.create(DcaeInventoryMessageEnum.REQUEST_FAILED_updateConfiguration,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, DcaeInventoryMessageEnum.REQUEST_FAILED_updateConfiguration, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "updateConfiguration", ApiRequestStatus.OKAY, duration_);
		
	}








	public static void ecoreSetup() {
		DcaeDcaeInventoryProvider.ecoreSetup();
	}
	public DcaeDcaeInventoryProvider getSiriusProvider() {
		return controller;
	}
}
