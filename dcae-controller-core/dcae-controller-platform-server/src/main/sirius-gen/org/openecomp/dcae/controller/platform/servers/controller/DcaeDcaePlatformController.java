
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.platform.servers.controller;






import java.io.InputStream;

import org.openecomp.ncomp.sirius.manager.IRequestHandler;
import org.openecomp.ncomp.sirius.manager.ISwaggerHandler;
import org.openecomp.ncomp.sirius.manager.ISiriusPlugin;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;
import org.openecomp.ncomp.sirius.manager.ManagementServer;
import org.openecomp.ncomp.sirius.manager.SwaggerUtils;
import org.openecomp.ncomp.sirius.function.FunctionUtils;
import org.openecomp.ncomp.component.ApiRequestStatus;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.json.JSONObject;

import java.util.Date;

import org.openecomp.dcae.controller.platform.servers.controller.logging.DcaePlatformControllerOperationEnum;
import org.openecomp.dcae.controller.platform.servers.controller.logging.DcaePlatformControllerMessageEnum;







import java.util.Date;





import org.openecomp.ncomp.sirius.manager.server.LoggerInfo;





import org.openecomp.ncomp.sirius.manager.server.ServerFactory;


import org.openecomp.dcae.controller.platform.controller.impl.DcaePlatformControllerImpl;



public class DcaeDcaePlatformController extends DcaePlatformControllerImpl implements IRequestHandler, ISwaggerHandler, ISiriusPlugin {
	public static final Logger logger = Logger.getLogger(DcaeDcaePlatformController.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public DcaeDcaePlatformControllerProvider controller;
	ISiriusServer server;

	public DcaeDcaePlatformController(ISiriusServer server) {
		this.server = server;
		this.controller = new DcaeDcaePlatformControllerProvider(server,this);
	}

	public void deployDescriptor(java.lang.String name) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "deployDescriptor", ApiRequestStatus.START, duration_,name);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.deployDescriptor);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.deployDescriptor(name);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "deployDescriptor", ApiRequestStatus.ERROR, duration_,name);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.deployDescriptor, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "deployDescriptor", ApiRequestStatus.OKAY, duration_,name);
		
	}

	public void refreshDataBus(java.lang.String nameMatch) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "refreshDataBus", ApiRequestStatus.START, duration_,nameMatch);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.refreshDataBus);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.refreshDataBus(nameMatch);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "refreshDataBus", ApiRequestStatus.ERROR, duration_,nameMatch);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.refreshDataBus, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "refreshDataBus", ApiRequestStatus.OKAY, duration_,nameMatch);
		
	}

	public void logs(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.logs.LogMessage> logs) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "logs", ApiRequestStatus.START, duration_,cx,logs);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.logs);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.logs(cx,logs);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "logs", ApiRequestStatus.ERROR, duration_,cx,logs);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.logs, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "logs", ApiRequestStatus.OKAY, duration_,cx,logs);
		
	}

	public void metrics(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.metrics.Metric> metrics) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "metrics", ApiRequestStatus.START, duration_,cx,metrics);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.metrics);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.metrics(cx,metrics);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "metrics", ApiRequestStatus.ERROR, duration_,cx,metrics);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.metrics, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "metrics", ApiRequestStatus.OKAY, duration_,cx,metrics);
		
	}

	public void properties(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.properties.AbstractProperty> l) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "properties", ApiRequestStatus.START, duration_,cx,l);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.properties);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.properties(cx,l);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "properties", ApiRequestStatus.ERROR, duration_,cx,l);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.properties, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "properties", ApiRequestStatus.OKAY, duration_,cx,l);
		
	}

	public void uploadInfo(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.server.ManagementInfo> info) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "uploadInfo", ApiRequestStatus.START, duration_,cx,info);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.uploadInfo);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.uploadInfo(cx,info);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "uploadInfo", ApiRequestStatus.ERROR, duration_,cx,info);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.uploadInfo, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "uploadInfo", ApiRequestStatus.OKAY, duration_,cx,info);
		
	}

	public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValues(org.json.JSONObject cx, java.lang.String path, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
		EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getValues", ApiRequestStatus.START, duration_,cx,path,start,end,option,relativeInterval);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.getValues);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.getValues(cx,path,start,end,option,relativeInterval);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getValues", ApiRequestStatus.ERROR, duration_,cx,path,start,end,option,relativeInterval);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.getValues, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getValues", ApiRequestStatus.OKAY, duration_,cx,path,start,end,option,relativeInterval);
		return res;
	}

	public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValuesAll(org.json.JSONObject cx, java.lang.String path, EList<java.lang.String> metrics, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
		EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getValuesAll", ApiRequestStatus.START, duration_,cx,path,metrics,start,end,option,relativeInterval);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.getValuesAll);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.getValuesAll(cx,path,metrics,start,end,option,relativeInterval);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getValuesAll", ApiRequestStatus.ERROR, duration_,cx,path,metrics,start,end,option,relativeInterval);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.getValuesAll, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getValuesAll", ApiRequestStatus.OKAY, duration_,cx,path,metrics,start,end,option,relativeInterval);
		return res;
	}

	public EList<org.openecomp.ncomp.core.logs.LogMessage> getMessages(org.json.JSONObject cx, java.lang.String path, java.lang.Long start, java.lang.Long end) {
		EList<org.openecomp.ncomp.core.logs.LogMessage> res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getMessages", ApiRequestStatus.START, duration_,cx,path,start,end);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.getMessages);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.getMessages(cx,path,start,end);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getMessages", ApiRequestStatus.ERROR, duration_,cx,path,start,end);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.getMessages, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getMessages", ApiRequestStatus.OKAY, duration_,cx,path,start,end);
		return res;
	}

	public org.openecomp.ncomp.sirius.manager.server.LoggerInfo getRequestLogger(java.lang.String userName, java.lang.String action, java.lang.String resourcePath, org.json.JSONObject context) {
		org.openecomp.ncomp.sirius.manager.server.LoggerInfo res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "getRequestLogger", ApiRequestStatus.START, duration_,userName,action,resourcePath,context);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.getRequestLogger);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.getRequestLogger(userName,action,resourcePath,context);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "getRequestLogger", ApiRequestStatus.ERROR, duration_,userName,action,resourcePath,context);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.getRequestLogger, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "getRequestLogger", ApiRequestStatus.OKAY, duration_,userName,action,resourcePath,context);
		return res;
	}

	public EList<org.openecomp.ncomp.core.function.ValuePair> evaluate(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {
		EList<org.openecomp.ncomp.core.function.ValuePair> res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "evaluate", ApiRequestStatus.START, duration_,path,function);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.evaluate);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			res =  controller.evaluate(path,function);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "evaluate", ApiRequestStatus.ERROR, duration_,path,function);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.evaluate, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "evaluate", ApiRequestStatus.OKAY, duration_,path,function);
		return res;
	}

	public void update(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "update", ApiRequestStatus.START, duration_,path,function);
		Date now_ = new Date();
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DcaePlatformControllerOperationEnum.update);
		ecomplogger.setInstanceId(ManagementServer.object2ref(this));
		try {
			 controller.update(path,function);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "update", ApiRequestStatus.ERROR, duration_,path,function);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(DcaePlatformControllerMessageEnum.update, e.toString());
			throw e;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "update", ApiRequestStatus.OKAY, duration_,path,function);
		
	}



	@Override
	public Object handleJson(String userName, String action, String resourcePath, JSONObject json, JSONObject context) {
		return controller.handleJson(userName,action,resourcePath,json,context);
	}

	@Override
	public Object handleBinary(String userName, String action, String resourcePath, InputStream in) {
		return controller.handleBinary(userName,action,resourcePath,in);
	}



@Override
public void updateSwagger(String path, SwaggerUtils swagger) {
	controller.updateSwagger(path,swagger);
}




	@Override
	public void start() {
		controller.start();
	}

	public static void ecoreSetup() {
		DcaeDcaePlatformControllerProvider.ecoreSetup();
	}
	public DcaeDcaePlatformControllerProvider getSomfProvider() {
		return controller;
	}
}
