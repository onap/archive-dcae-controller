
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.platform.servers.controller.inventory;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.dcae.controller.inventory.impl.DcaeInventoryImpl;
import org.openecomp.dcae.controller.inventory.InventoryPackage;
import org.openecomp.dcae.controller.platform.servers.controller.inventory.logging.DcaeInventoryOperationEnum;
import org.openecomp.dcae.controller.platform.servers.controller.inventory.logging.DcaeInventoryMessageEnum;


import org.openecomp.dcae.controller.platform.servers.controller.DcaeDcaePlatformController; 



 
@SuppressWarnings("unchecked")
public class DcaeDcaeInventoryClient extends DcaeInventoryImpl {
	public static final Logger logger = Logger.getLogger(DcaeDcaeInventoryClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public DcaeDcaeInventoryClient(String file, String name) {
		DcaeDcaePlatformController.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/inventory", this);
		client.setVersion("ONAP-R2");
	}

	public DcaeDcaeInventoryClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/inventory", this);
		client.setVersion("ONAP-R2");
	}
	
	public DcaeDcaeInventoryClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}



	@Override
	public org.openecomp.dcae.controller.inventory.DcaeServiceTypeResults getDcaeServiceTypes(java.lang.String typeName, java.lang.Boolean onlyLatest, java.lang.Boolean onlyActive, java.lang.String vnfType, java.lang.String serviceId, java.lang.String serviceLocation, java.lang.String asdcServiceId, java.lang.String asdcResourceId, java.lang.Integer offset) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServiceTypes,client.getRemote());
		org.openecomp.dcae.controller.inventory.DcaeServiceTypeResults res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.DcaeServiceTypeResults) client.operationPath("/inventory", c, "getDcaeServiceTypes", null, typeName,onlyLatest,onlyActive,vnfType,serviceId,serviceLocation,asdcServiceId,asdcResourceId,offset);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServiceTypes, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServiceTypes,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServiceTypes,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.dcae.controller.inventory.ApiResponseMessage deleteDcaeServiceTypesType(java.lang.String typeId) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_deleteDcaeServiceTypesType,client.getRemote());
		org.openecomp.dcae.controller.inventory.ApiResponseMessage res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.ApiResponseMessage) client.operationPath("/inventory", c, "deleteDcaeServiceTypesType", null, typeId);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_deleteDcaeServiceTypesType, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_deleteDcaeServiceTypesType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_deleteDcaeServiceTypesType,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.dcae.controller.inventory.DCAEServiceType getDcaeServiceTypesType(java.lang.String typeId) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServiceTypesType,client.getRemote());
		org.openecomp.dcae.controller.inventory.DCAEServiceType res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.DCAEServiceType) client.operationPath("/inventory", c, "getDcaeServiceTypesType", null, typeId);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServiceTypesType, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServiceTypesType,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServiceTypesType,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.dcae.controller.inventory.DCAEServiceType createDcaeServiceTypesTypeName(org.openecomp.dcae.controller.inventory.DCAEServiceTypeRequest body) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_createDcaeServiceTypesTypeName,client.getRemote());
		org.openecomp.dcae.controller.inventory.DCAEServiceType res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.DCAEServiceType) client.operationPath("/inventory", c, "createDcaeServiceTypesTypeName", null, body);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_createDcaeServiceTypesTypeName, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_createDcaeServiceTypesTypeName,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_createDcaeServiceTypesTypeName,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.dcae.controller.inventory.DcaeServiceResults getDcaeServices(java.lang.String typeId, java.lang.String vnfId, java.lang.String vnfType, java.lang.String vnfLocation, java.lang.String componentType, java.lang.Boolean shareable, java.lang.String created, java.lang.Integer offset) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServices,client.getRemote());
		org.openecomp.dcae.controller.inventory.DcaeServiceResults res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.DcaeServiceResults) client.operationPath("/inventory", c, "getDcaeServices", null, typeId,vnfId,vnfType,vnfLocation,componentType,shareable,created,offset);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServices, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServices,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServices,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.dcae.controller.inventory.DCAEServiceGroupByResults getDcaeServicesGroupbyPropertyName(java.lang.String propertyName) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServicesGroupbyPropertyName,client.getRemote());
		org.openecomp.dcae.controller.inventory.DCAEServiceGroupByResults res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.DCAEServiceGroupByResults) client.operationPath("/inventory", c, "getDcaeServicesGroupbyPropertyName", null, propertyName);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServicesGroupbyPropertyName, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServicesGroupbyPropertyName,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServicesGroupbyPropertyName,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void deleteDcaeServicesService(java.lang.String serviceId) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_deleteDcaeServicesService,client.getRemote());
		
		try {
		  client.operationPath("/inventory", c, "deleteDcaeServicesService", null, serviceId);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_deleteDcaeServicesService, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_deleteDcaeServicesService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_deleteDcaeServicesService,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public org.openecomp.dcae.controller.inventory.DCAEService getDcaeServicesService(java.lang.String serviceId) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_getDcaeServicesService,client.getRemote());
		org.openecomp.dcae.controller.inventory.DCAEService res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.DCAEService) client.operationPath("/inventory", c, "getDcaeServicesService", null, serviceId);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServicesService, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServicesService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_getDcaeServicesService,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.dcae.controller.inventory.DCAEService createDcaeServicesService(java.lang.String serviceId, org.openecomp.dcae.controller.inventory.DCAEServiceRequest body) {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_createDcaeServicesService,client.getRemote());
		org.openecomp.dcae.controller.inventory.DCAEService res;
		try {
		  res = (org.openecomp.dcae.controller.inventory.DCAEService) client.operationPath("/inventory", c, "createDcaeServicesService", null, serviceId,body);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_createDcaeServicesService, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_createDcaeServicesService,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_createDcaeServicesService,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void poll() {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_poll,client.getRemote());
		
		try {
		  client.operationPath("/inventory", c, "poll", null);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_poll, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_poll,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_poll,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void updateConfiguration() {
		EClass c = InventoryPackage.eINSTANCE.getDcaeInventory(); 
		ecomplogger.recordMetricEventStart(DcaeInventoryOperationEnum.DcaeInventory_updateConfiguration,client.getRemote());
		
		try {
		  client.operationPath("/inventory", c, "updateConfiguration", null);
		}
		catch (Exception e) {
			ecomplogger.warn(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_updateConfiguration, e.toString());
			EcompException e1 = EcompException.create(DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_updateConfiguration,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,DcaeInventoryMessageEnum.REMOTE_CALL_FAILED_updateConfiguration,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

}
