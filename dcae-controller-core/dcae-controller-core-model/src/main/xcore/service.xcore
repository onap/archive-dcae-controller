
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
@GenModel(modelDirectory="/dcae-controller-core-model/src/main/xcore-gen")
 
package org.openecomp.dcae.controller.core.service
 
import org.openecomp.ncomp.core.NamedEntity
import org.openecomp.ncomp.core.DeploymentStatus
import org.openecomp.dcae.controller.core.stream.DcaeStream
import org.openecomp.ncomp.openstack.location.OpenStackProject
import org.eclipse.emf.ecore.EObject
import org.openecomp.ncomp.core.JsonObject
import org.openecomp.ncomp.core.DateMetricAttribute


annotation "http://openecomp.org" as ecomp
annotation "http://openecomp.org/cdap" as cdap


abstract class DcaeServiceContainer extends NamedEntity {    
	refers DcaeServiceInstance[] instances opposite serviceContainer 
}

abstract class DcaeService extends NamedEntity {
	// will contain a list of instances.
	op void deploy(String instanceName, String containerPath)
	op void undeploy(String instanceName)	
	op HealthTestResponse test(String instanceName)
	op void suspend(String instanceName)	
	op void resume(String instanceName)
	op void pushManagerConfiguration(String instanceName)
	op void pollManagerConfiguration(String instanceName) 
	op EObject managerConfiguration(String instanceName)
	op JsonObject managerOperation(String instanceName, String operation, JsonObject parameters) 
	op void updateConfigurationFromPolicy(String instanceName)
	op void runHealthTests()
} 

abstract class DcaeServiceInstance extends NamedEntity {   
	@ecomp(^type = "operational")
	refers DcaeServiceContainer serviceContainer opposite instances
	@ecomp(^type = "operational")
	DeploymentStatus status
	@ecomp(^type = "service")
	contains DcaeStream[] inputStreams
	@ecomp(^type = "service")
	contains DcaeStream[] outputStreams
	transient DateMetricAttribute lastHealthTest
	HealthTestStatus healthTestStatus
	String healthTestMessageCode
}

class DcaeLocation extends DcaeServiceContainer {
	String locationType
	refers OpenStackProject openstackProject
}

class DcaeServiceDescriptor extends NamedEntity {
	String groupId
	String artifact
	String version
}

enum HealthTestStatus {
	GREEN, YELLOW, RED
}

class HealthTestResponse {
	HealthTestStatus status
	String messageCode
}

abstract class DcaePolicyEntity {
	@cdap( destination = "namespace-prefs::${path}.policyName")
	String policyName
	@cdap( destination = "namespace-prefs::${path}.policyDescription")
	String policyDescription
	@cdap( destination = "namespace-prefs::${path}.policyConfigName")
	String policyConfigName
	@cdap( destination = "namespace-prefs::${path}.policyTemplateVersion")
	String policyTemplateVersion
	@cdap( destination = "namespace-prefs::${path}.policyVersion")
	String policyVersion
	@cdap( destination = "namespace-prefs::${path}.policyPriority")
	String policyPriority
	@cdap( destination = "namespace-prefs::${path}.policyScope")
	String policyScope
}

