
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */

// Autogenerated
// Do not edit but extend this class as needed
package org.openecomp.dcae.controller.service.cdap.cluster.servers.manager;


import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;
import org.openecomp.dcae.controller.service.cdap.cluster.servers.manager.gui.DcaeGuiClientApiConsole;
import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.ManagementServerError;
import org.openecomp.ncomp.sirius.manager.console.Console;


public class DcaeCdapClusterManagerConsole extends Console {
    public static final Logger logger = Logger.getLogger(DcaeCdapClusterManagerConsole.class);
    protected DcaeCdapClusterManagerClient controller;


    DcaeGuiClientApiConsole gui;


    public DcaeCdapClusterManagerConsole(String filename, String name) {
        super(filename, name);
        controller = new DcaeCdapClusterManagerClient(filename, name);
        client = controller.client;

        gui = new DcaeGuiClientApiConsole(filename, name);
    }

    public DcaeCdapClusterManagerConsole(AbstractClient c) {
        controller = new DcaeCdapClusterManagerClient(c);
        client = controller.client;
    }


    public org.openecomp.dcae.controller.core.service.HealthTestResponse test() {
        org.openecomp.dcae.controller.core.service.HealthTestResponse res = null;
        try {
            res = controller.test();
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public void suspend() {

        try {
            controller.suspend();
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public void resume() {

        try {
            controller.resume();
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public java.lang.String publicKey() {
        java.lang.String res = null;
        try {
            res = controller.publicKey();
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public void configurationChanged() {

        try {
            controller.configurationChanged();
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public void updateStreams(EList<org.openecomp.dcae.controller.core.stream.DcaeStream> inputStreams, EList<org.openecomp.dcae.controller.core.stream.DcaeStream> outputStreams) {

        try {
            controller.updateStreams(inputStreams, outputStreams);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public void logs(EList<org.openecomp.ncomp.core.logs.LogMessage> logs) {

        try {
            controller.logs(null, logs);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public void metrics(EList<org.openecomp.ncomp.core.metrics.Metric> metrics) {

        try {
            controller.metrics(null, metrics);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public void properties(EList<org.openecomp.ncomp.sirius.manager.properties.AbstractProperty> l) {

        try {
            controller.properties(null, l);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public void uploadInfo(EList<org.openecomp.ncomp.sirius.manager.server.ManagementInfo> info) {

        try {
            controller.uploadInfo(null, info);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValues(java.lang.String path, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
        EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res = null;
        try {
            res = controller.getValues(null, path, start, end, option, relativeInterval);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValuesAll(java.lang.String path, EList<java.lang.String> metrics, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
        EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res = null;
        try {
            res = controller.getValuesAll(null, path, metrics, start, end, option, relativeInterval);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public EList<org.openecomp.ncomp.core.logs.LogMessage> getMessages(java.lang.String path, java.lang.Long start, java.lang.Long end) {
        EList<org.openecomp.ncomp.core.logs.LogMessage> res = null;
        try {
            res = controller.getMessages(null, path, start, end);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public org.openecomp.ncomp.sirius.manager.server.LoggerInfo getRequestLogger(java.lang.String userName, java.lang.String action, java.lang.String resourcePath, org.json.JSONObject context) {
        org.openecomp.ncomp.sirius.manager.server.LoggerInfo res = null;
        try {
            res = controller.getRequestLogger(userName, action, resourcePath, context);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public EList<org.openecomp.ncomp.core.function.ValuePair> evaluate(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {
        EList<org.openecomp.ncomp.core.function.ValuePair> res = null;
        try {
            res = controller.evaluate(path, function);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public void update(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {

        try {
            controller.update(path, function);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }

    }

    public java.lang.String createNamespace(java.lang.String namespace) {
        java.lang.String res = null;
        try {
            res = controller.createNamespace(namespace);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String deleteNamespace(java.lang.String namespace) {
        java.lang.String res = null;
        try {
            res = controller.deleteNamespace(namespace);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String deployApp(java.lang.String namespace, java.lang.String jarfile) {
        java.lang.String res = null;
        try {
            res = controller.deployApp(namespace, jarfile);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String loadArtifact(java.lang.String namespace, java.lang.String artifactName, java.lang.String jarfile, java.lang.String version) {
        java.lang.String res = null;
        try {
            res = controller.loadArtifact(namespace, artifactName, jarfile, version);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String loadArtifactWithConfig(java.lang.String namespace, java.lang.String artifactName, java.lang.String jarfile, java.lang.String version, java.lang.String config) {
        java.lang.String res = null;
        try {
            res = controller.loadArtifactWithConfig(namespace, artifactName, jarfile, version, config);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String deleteArtifact(java.lang.String namespace, java.lang.String artifactName, java.lang.String artifactVersion) {
        java.lang.String res = null;
        try {
            res = controller.deleteArtifact(namespace, artifactName, artifactVersion);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String startFlow(java.lang.String namespace, java.lang.String appName, java.lang.String flowId, java.lang.String extraArgs) {
        java.lang.String res = null;
        try {
            res = controller.startFlow(namespace, appName, flowId, extraArgs);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String startWorker(java.lang.String namespace, java.lang.String appName, java.lang.String workerId, java.lang.String extraArgs) {
        java.lang.String res = null;
        try {
            res = controller.startWorker(namespace, appName, workerId, extraArgs);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String startService(java.lang.String namespace, java.lang.String appName, java.lang.String serviceId, java.lang.String extraArgs) {
        java.lang.String res = null;
        try {
            res = controller.startService(namespace, appName, serviceId, extraArgs);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String startApp(java.lang.String namespace, java.lang.String appName) {
        java.lang.String res = null;
        try {
            res = controller.startApp(namespace, appName);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String stopApp(java.lang.String namespace, java.lang.String appName, java.lang.String programTypes) {
        java.lang.String res = null;
        try {
            res = controller.stopApp(namespace, appName, programTypes);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String deleteApp(java.lang.String namespace, java.lang.String appName) {
        java.lang.String res = null;
        try {
            res = controller.deleteApp(namespace, appName);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String loadPreferencesApp(java.lang.String namespace, java.lang.String prefsFile, java.lang.String appId) {
        java.lang.String res = null;
        try {
            res = controller.loadPreferencesApp(namespace, prefsFile, appId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String loadPreferencesFlow(java.lang.String namespace, java.lang.String prefsFile, java.lang.String appId, java.lang.String flowId) {
        java.lang.String res = null;
        try {
            res = controller.loadPreferencesFlow(namespace, prefsFile, appId, flowId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String loadPreferencesNameSpace(java.lang.String namespace, java.lang.String prefsFile) {
        java.lang.String res = null;
        try {
            res = controller.loadPreferencesNameSpace(namespace, prefsFile);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setPreferencesApp(java.lang.String namespace, java.lang.String prefsString, java.lang.String appId) {
        java.lang.String res = null;
        try {
            res = controller.setPreferencesApp(namespace, prefsString, appId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setPreferencesFlow(java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String flowId) {
        java.lang.String res = null;
        try {
            res = controller.setPreferencesFlow(namespace, prefsString, appId, flowId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setPreferencesWorker(java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String workerId) {
        java.lang.String res = null;
        try {
            res = controller.setPreferencesWorker(namespace, prefsString, appId, workerId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setPreferencesService(java.lang.String namespace, java.lang.String prefsString, java.lang.String appId, java.lang.String serviceId) {
        java.lang.String res = null;
        try {
            res = controller.setPreferencesService(namespace, prefsString, appId, serviceId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setPreferencesNameSpace(java.lang.String namespace, java.lang.String prefsString) {
        java.lang.String res = null;
        try {
            res = controller.setPreferencesNameSpace(namespace, prefsString);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setFlowRunTimeArgs(java.lang.String namespace, java.lang.String appId, java.lang.String flowId, java.lang.String args) {
        java.lang.String res = null;
        try {
            res = controller.setFlowRunTimeArgs(namespace, appId, flowId, args);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setFlowletInstances(java.lang.String namespace, java.lang.String appId, java.lang.String flowId, java.lang.String flowletId, int nInstances) {
        java.lang.String res = null;
        try {
            res = controller.setFlowletInstances(namespace, appId, flowId, flowletId, nInstances);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String stopFlow(java.lang.String namespace, java.lang.String appId, java.lang.String flowId) {
        java.lang.String res = null;
        try {
            res = controller.stopFlow(namespace, appId, flowId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String stopWorker(java.lang.String namespace, java.lang.String appId, java.lang.String workerId) {
        java.lang.String res = null;
        try {
            res = controller.stopWorker(namespace, appId, workerId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String stopService(java.lang.String namespace, java.lang.String appId, java.lang.String serviceId) {
        java.lang.String res = null;
        try {
            res = controller.stopService(namespace, appId, serviceId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String truncateDataSet(java.lang.String namespace, java.lang.String datasetName) {
        java.lang.String res = null;
        try {
            res = controller.truncateDataSet(namespace, datasetName);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String deleteDataset(java.lang.String namespace, java.lang.String datasetName) {
        java.lang.String res = null;
        try {
            res = controller.deleteDataset(namespace, datasetName);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String createStream(java.lang.String namespace, java.lang.String newStreamId) {
        java.lang.String res = null;
        try {
            res = controller.createStream(namespace, newStreamId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String deleteStream(java.lang.String namespace, java.lang.String streamId) {
        java.lang.String res = null;
        try {
            res = controller.deleteStream(namespace, streamId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public EList<java.lang.String> getStreamEvents(java.lang.String namespace, java.lang.String streamId, java.lang.String startTime, java.lang.String endTime, int limit) {
        EList<java.lang.String> res = null;
        try {
            res = controller.getStreamEvents(namespace, streamId, startTime, endTime, limit);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public EList<java.lang.String> getStreamStats(java.lang.String namespace, java.lang.String streamId, java.lang.String startTime, java.lang.String endTime, int limit) {
        EList<java.lang.String> res = null;
        try {
            res = controller.getStreamStats(namespace, streamId, startTime, endTime, limit);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String sendEventToStream(java.lang.String namespace, java.lang.String streamId, java.lang.String event) {
        java.lang.String res = null;
        try {
            res = controller.sendEventToStream(namespace, streamId, event);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String trucateStream(java.lang.String namespace, java.lang.String streamId) {
        java.lang.String res = null;
        try {
            res = controller.trucateStream(namespace, streamId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setStreamProperties(java.lang.String namespace, java.lang.String streamId, java.lang.String propsFile) {
        java.lang.String res = null;
        try {
            res = controller.setStreamProperties(namespace, streamId, propsFile);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String restartApp(java.lang.String namespace, java.lang.String appId, java.lang.String progTypes) {
        java.lang.String res = null;
        try {
            res = controller.restartApp(namespace, appId, progTypes);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String createApp(java.lang.String namespace, java.lang.String appId, java.lang.String artifactName, java.lang.String artifactVersion, java.lang.String scope) {
        java.lang.String res = null;
        try {
            res = controller.createApp(namespace, appId, artifactName, artifactVersion, scope);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String createAppWithConfig(java.lang.String namespace, java.lang.String appId, java.lang.String artifactName, java.lang.String artifactVersion, java.lang.String scope, java.lang.String appConfig) {
        java.lang.String res = null;
        try {
            res = controller.createAppWithConfig(namespace, appId, artifactName, artifactVersion, scope, appConfig);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setDatasetProperties(java.lang.String namespace, java.lang.String datasetName, java.lang.String datasetProperties) {
        java.lang.String res = null;
        try {
            res = controller.setDatasetProperties(namespace, datasetName, datasetProperties);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String setStreamTTL(java.lang.String namespace, java.lang.String streamName, int ttlSeconds) {
        java.lang.String res = null;
        try {
            res = controller.setStreamTTL(namespace, streamName, ttlSeconds);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String suspendSchedule(java.lang.String namespace, java.lang.String appId, java.lang.String scheduleId) {
        java.lang.String res = null;
        try {
            res = controller.suspendSchedule(namespace, appId, scheduleId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

    public java.lang.String resumeSchedule(java.lang.String namespace, java.lang.String appId, java.lang.String scheduleId) {
        java.lang.String res = null;
        try {
            res = controller.resumeSchedule(namespace, appId, scheduleId);
        } catch (ManagementServerError e) {
            logger.error("ERROR: " + e.getJson().toString(2), e);
        }
        return res;
    }

}
