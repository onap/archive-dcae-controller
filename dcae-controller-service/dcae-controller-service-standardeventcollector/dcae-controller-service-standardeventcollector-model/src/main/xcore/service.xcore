
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
@GenModel(modelDirectory="/dcae-controller-service-standardeventcollector-model/src/main/xcore-gen")


package org.openecomp.dcae.controller.service.standardeventcollector.service


import org.openecomp.dcae.controller.service.docker.DockerService 
import org.openecomp.dcae.controller.service.docker.DockerServiceInstance 

annotation "http://openecomp.org" as ecomp

class ControllerServiceStandardeventcollectorService extends DockerService {   
	  
} 

// state in the controller
class ControllerServiceStandardeventcollectorServiceInstance extends DockerServiceInstance, ControllerServiceStandardeventcollectorServiceConfiguration {
}

// state in both controller and manager
class ControllerServiceStandardeventcollectorServiceConfiguration { 
//	@ecomp(^type = "configuration")
//	String cdapUrl
	@ecomp(^type = "configuration")
	String cport
	@ecomp(^type = "configuration")
	String csecport
	@ecomp(^type = "configuration")
	String keystoreloc
	@ecomp(^type = "configuration")
	String keystorepwd
    @ecomp(^type = "configuration")
	String maxinputqueue
	@ecomp(^type = "configuration")
	String authid
	@ecomp(^type = "configuration")
	String authflag
    @ecomp(^type = "configuration")
	String authpwd
	@ecomp(^type = "configuration")
	String authfile
	@ecomp(^type = "configuration")
	String checkschemaflag
	@ecomp(^type = "configuration")
	String schemafile
	
 
}


