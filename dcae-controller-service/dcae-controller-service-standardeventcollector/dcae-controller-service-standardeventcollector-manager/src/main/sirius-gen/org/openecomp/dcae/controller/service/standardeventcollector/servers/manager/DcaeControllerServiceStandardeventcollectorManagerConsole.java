
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit but extend this class as needed
package org.openecomp.dcae.controller.service.standardeventcollector.servers.manager;


import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;

import org.openecomp.ncomp.sirius.manager.console.Console;
import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.ManagementServerError;

    

import org.openecomp.dcae.controller.service.standardeventcollector.servers.manager.gui.DcaeGuiClientApiConsole;   


public class DcaeControllerServiceStandardeventcollectorManagerConsole extends Console {
	public static final Logger logger = Logger.getLogger(DcaeControllerServiceStandardeventcollectorManagerConsole.class);
    protected DcaeControllerServiceStandardeventcollectorManagerClient controller;
    
    
        DcaeGuiClientApiConsole gui;   


    public DcaeControllerServiceStandardeventcollectorManagerConsole(String filename, String name) {
            super(filename, name);
            controller = new DcaeControllerServiceStandardeventcollectorManagerClient(filename,name);
            client = controller.client;
    
            gui = new  DcaeGuiClientApiConsole(filename,name);   
    }
    
	public DcaeControllerServiceStandardeventcollectorManagerConsole(AbstractClient c) {
        controller = new DcaeControllerServiceStandardeventcollectorManagerClient(c);
        client = controller.client;
    }


	public org.openecomp.dcae.controller.core.service.HealthTestResponse test() {
		org.openecomp.dcae.controller.core.service.HealthTestResponse res = null;
		try {
			res =  controller.test();
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public void suspend() {
		
		try {
			 controller.suspend();
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public void resume() {
		
		try {
			 controller.resume();
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public java.lang.String publicKey() {
		java.lang.String res = null;
		try {
			res =  controller.publicKey();
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public void configurationChanged() {
		
		try {
			 controller.configurationChanged();
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public void updateStreams(EList<org.openecomp.dcae.controller.core.stream.DcaeStream> inputStreams, EList<org.openecomp.dcae.controller.core.stream.DcaeStream> outputStreams) {
		
		try {
			 controller.updateStreams(inputStreams,outputStreams);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

}
