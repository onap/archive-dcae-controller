
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.service.dmaap.drsub.servers.manager;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.dcae.controller.service.dmaap.drsub.manager.impl.ControllerServiceDmaapDrsubManagerImpl;
import org.openecomp.dcae.controller.service.dmaap.drsub.manager.ManagerPackage;
import org.openecomp.dcae.controller.service.dmaap.drsub.servers.manager.logging.ControllerServiceDmaapDrsubManagerOperationEnum;
import org.openecomp.dcae.controller.service.dmaap.drsub.servers.manager.logging.ControllerServiceDmaapDrsubManagerMessageEnum;





 
@SuppressWarnings("unchecked")
public class DcaeControllerServiceDmaapDrsubManagerClient extends ControllerServiceDmaapDrsubManagerImpl {
	public static final Logger logger = Logger.getLogger(DcaeControllerServiceDmaapDrsubManagerClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public DcaeControllerServiceDmaapDrsubManagerClient(String file, String name) {
		DcaeControllerServiceDmaapDrsubManager.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/resources", this);
	}

	public DcaeControllerServiceDmaapDrsubManagerClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/resources", this);
	}
	
	public DcaeControllerServiceDmaapDrsubManagerClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
	}



	@Override
	public org.openecomp.dcae.controller.core.service.HealthTestResponse test() {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_test);
		org.openecomp.dcae.controller.core.service.HealthTestResponse res;
		try {
		  res = (org.openecomp.dcae.controller.core.service.HealthTestResponse) client.operationPath("/resources", c, "test", null);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_test, e.toString());
			throw new RuntimeException("remote call failed:  test", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void suspend() {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_suspend);
		
		try {
		  client.operationPath("/resources", c, "suspend", null);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_suspend, e.toString());
			throw new RuntimeException("remote call failed:  suspend", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void resume() {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_resume);
		
		try {
		  client.operationPath("/resources", c, "resume", null);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_resume, e.toString());
			throw new RuntimeException("remote call failed:  resume", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public java.lang.String publicKey() {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_publicKey);
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath("/resources", c, "publicKey", null);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_publicKey, e.toString());
			throw new RuntimeException("remote call failed:  publicKey", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void configurationChanged() {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_configurationChanged);
		
		try {
		  client.operationPath("/resources", c, "configurationChanged", null);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_configurationChanged, e.toString());
			throw new RuntimeException("remote call failed:  configurationChanged", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void updateStreams(EList<org.openecomp.dcae.controller.core.stream.DcaeStream> inputStreams, EList<org.openecomp.dcae.controller.core.stream.DcaeStream> outputStreams) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_updateStreams);
		
		try {
		  client.operationPath("/resources", c, "updateStreams", null, inputStreams,outputStreams);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_updateStreams, e.toString());
			throw new RuntimeException("remote call failed:  updateStreams", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void logs(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.logs.LogMessage> logs) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_logs);
		
		try {
		  client.operationPath("/resources", c, "logs", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,logs);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_logs, e.toString());
			throw new RuntimeException("remote call failed:  logs", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void metrics(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.metrics.Metric> metrics) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_metrics);
		
		try {
		  client.operationPath("/resources", c, "metrics", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,metrics);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_metrics, e.toString());
			throw new RuntimeException("remote call failed:  metrics", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void properties(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.properties.AbstractProperty> l) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_properties);
		
		try {
		  client.operationPath("/resources", c, "properties", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,l);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_properties, e.toString());
			throw new RuntimeException("remote call failed:  properties", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void uploadInfo(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.server.ManagementInfo> info) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_uploadInfo);
		
		try {
		  client.operationPath("/resources", c, "uploadInfo", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,info);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_uploadInfo, e.toString());
			throw new RuntimeException("remote call failed:  uploadInfo", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValues(org.json.JSONObject cx, java.lang.String path, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_getValues);
		EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.metrics.DoubleMetric>) client.operationPath("/resources", c, "getValues", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,path,start,end,option,relativeInterval);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_getValues, e.toString());
			throw new RuntimeException("remote call failed:  getValues", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public EList<org.openecomp.ncomp.core.metrics.DoubleMetric> getValuesAll(org.json.JSONObject cx, java.lang.String path, EList<java.lang.String> metrics, java.lang.Long start, java.lang.Long end, org.openecomp.ncomp.core.metrics.MetricValueOption option, boolean relativeInterval) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_getValuesAll);
		EList<org.openecomp.ncomp.core.metrics.DoubleMetric> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.metrics.DoubleMetric>) client.operationPath("/resources", c, "getValuesAll", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,path,metrics,start,end,option,relativeInterval);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_getValuesAll, e.toString());
			throw new RuntimeException("remote call failed:  getValuesAll", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public EList<org.openecomp.ncomp.core.logs.LogMessage> getMessages(org.json.JSONObject cx, java.lang.String path, java.lang.Long start, java.lang.Long end) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_getMessages);
		EList<org.openecomp.ncomp.core.logs.LogMessage> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.logs.LogMessage>) client.operationPath("/resources", c, "getMessages", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,path,start,end);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_getMessages, e.toString());
			throw new RuntimeException("remote call failed:  getMessages", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.openecomp.ncomp.sirius.manager.server.LoggerInfo getRequestLogger(java.lang.String userName, java.lang.String action, java.lang.String resourcePath, org.json.JSONObject context) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_getRequestLogger);
		org.openecomp.ncomp.sirius.manager.server.LoggerInfo res;
		try {
		  res = (org.openecomp.ncomp.sirius.manager.server.LoggerInfo) client.operationPath("/resources", c, "getRequestLogger", null, userName,action,resourcePath,context);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_getRequestLogger, e.toString());
			throw new RuntimeException("remote call failed:  getRequestLogger", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public EList<org.openecomp.ncomp.core.function.ValuePair> evaluate(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_evaluate);
		EList<org.openecomp.ncomp.core.function.ValuePair> res;
		try {
		  res = (EList<org.openecomp.ncomp.core.function.ValuePair>) client.operationPath("/resources", c, "evaluate", null, path,function);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_evaluate, e.toString());
			throw new RuntimeException("remote call failed:  evaluate", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void update(java.lang.String path, org.openecomp.ncomp.core.function.Function function) {
		EClass c = ManagerPackage.eINSTANCE.getControllerServiceDmaapDrsubManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(ControllerServiceDmaapDrsubManagerOperationEnum.REMOTE_update);
		
		try {
		  client.operationPath("/resources", c, "update", null, path,function);
		}
		catch (Exception e) {
			ecomplogger.warn(ControllerServiceDmaapDrsubManagerMessageEnum.REMOTE_update, e.toString());
			throw new RuntimeException("remote call failed:  update", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

}
