
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.service.servers.vm;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.dcae.controller.service.vm.impl.VirtualMachineServiceImpl;
import org.openecomp.dcae.controller.service.vm.VmPackage;
import org.openecomp.dcae.controller.service.servers.vm.logging.VirtualMachineServiceOperationEnum;
import org.openecomp.dcae.controller.service.servers.vm.logging.VirtualMachineServiceMessageEnum;





 
@SuppressWarnings("unchecked")
public class DcaeVirtualMachineServiceClient extends VirtualMachineServiceImpl {
	public static final Logger logger = Logger.getLogger(DcaeVirtualMachineServiceClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public DcaeVirtualMachineServiceClient(String file, String name) {
		DcaeVirtualMachineService.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}

	public DcaeVirtualMachineServiceClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}
	
	public DcaeVirtualMachineServiceClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}



	@Override
	public void updateDeploymentStatus() {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_updateDeploymentStatus,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "updateDeploymentStatus", null);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_updateDeploymentStatus, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_updateDeploymentStatus,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_updateDeploymentStatus,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void deploy(java.lang.String instanceName, java.lang.String containerPath) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_deploy,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "deploy", null, instanceName,containerPath);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_deploy, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_deploy,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_deploy,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void undeploy(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_undeploy,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "undeploy", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_undeploy, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_undeploy,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_undeploy,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public org.openecomp.dcae.controller.core.service.HealthTestResponse test(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_test,client.getRemote());
		org.openecomp.dcae.controller.core.service.HealthTestResponse res;
		try {
		  res = (org.openecomp.dcae.controller.core.service.HealthTestResponse) client.operationPath("/resources", c, "test", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_test, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_test,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_test,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void suspend(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_suspend,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "suspend", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_suspend, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_suspend,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_suspend,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void resume(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_resume,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "resume", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_resume, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_resume,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_resume,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void pushManagerConfiguration(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_pushManagerConfiguration,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "pushManagerConfiguration", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_pushManagerConfiguration, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_pushManagerConfiguration,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_pushManagerConfiguration,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void pollManagerConfiguration(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_pollManagerConfiguration,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "pollManagerConfiguration", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_pollManagerConfiguration, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_pollManagerConfiguration,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_pollManagerConfiguration,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public org.eclipse.emf.ecore.EObject managerConfiguration(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_managerConfiguration,client.getRemote());
		org.eclipse.emf.ecore.EObject res;
		try {
		  res = (org.eclipse.emf.ecore.EObject) client.operationPath("/resources", c, "managerConfiguration", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_managerConfiguration, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_managerConfiguration,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_managerConfiguration,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public org.json.JSONObject managerOperation(java.lang.String instanceName, java.lang.String operation, org.json.JSONObject parameters) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_managerOperation,client.getRemote());
		org.json.JSONObject res;
		try {
		  res = (org.json.JSONObject) client.operationPath("/resources", c, "managerOperation", null, instanceName,operation,parameters);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_managerOperation, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_managerOperation,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_managerOperation,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void updateConfigurationFromPolicy(java.lang.String instanceName) {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_updateConfigurationFromPolicy,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "updateConfigurationFromPolicy", null, instanceName);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_updateConfigurationFromPolicy, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_updateConfigurationFromPolicy,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_updateConfigurationFromPolicy,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void runHealthTests() {
		EClass c = VmPackage.eINSTANCE.getVirtualMachineService(); 
		ecomplogger.recordMetricEventStart(VirtualMachineServiceOperationEnum.VirtualMachineService_runHealthTests,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "runHealthTests", null);
		}
		catch (Exception e) {
			ecomplogger.warn(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_runHealthTests, e.toString());
			EcompException e1 = EcompException.create(VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_runHealthTests,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,VirtualMachineServiceMessageEnum.REMOTE_CALL_FAILED_runHealthTests,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

}
