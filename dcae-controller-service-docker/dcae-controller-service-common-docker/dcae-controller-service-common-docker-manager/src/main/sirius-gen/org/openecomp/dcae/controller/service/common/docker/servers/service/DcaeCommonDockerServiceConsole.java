
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit but extend this class as needed
package org.openecomp.dcae.controller.service.common.docker.servers.service;


import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;

import org.openecomp.ncomp.sirius.manager.console.Console;
import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.ManagementServerError;




public class DcaeCommonDockerServiceConsole extends Console {
	public static final Logger logger = Logger.getLogger(DcaeCommonDockerServiceConsole.class);
    protected DcaeCommonDockerServiceClient controller;
    



    public DcaeCommonDockerServiceConsole(String filename, String name) {
            super(filename, name);
            controller = new DcaeCommonDockerServiceClient(filename,name);
            client = controller.client;

    }
    
	public DcaeCommonDockerServiceConsole(AbstractClient c) {
        controller = new DcaeCommonDockerServiceClient(c);
        client = controller.client;
    }


	public void deploy(java.lang.String instanceName, java.lang.String containerPath) {
		
		try {
			 controller.deploy(instanceName,containerPath);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public void undeploy(java.lang.String instanceName) {
		
		try {
			 controller.undeploy(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public org.openecomp.dcae.controller.core.service.HealthTestResponse test(java.lang.String instanceName) {
		org.openecomp.dcae.controller.core.service.HealthTestResponse res = null;
		try {
			res =  controller.test(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public void suspend(java.lang.String instanceName) {
		
		try {
			 controller.suspend(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public void resume(java.lang.String instanceName) {
		
		try {
			 controller.resume(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public void pushManagerConfiguration(java.lang.String instanceName) {
		
		try {
			 controller.pushManagerConfiguration(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public void pollManagerConfiguration(java.lang.String instanceName) {
		
		try {
			 controller.pollManagerConfiguration(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public org.eclipse.emf.ecore.EObject managerConfiguration(java.lang.String instanceName) {
		org.eclipse.emf.ecore.EObject res = null;
		try {
			res =  controller.managerConfiguration(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public org.json.JSONObject managerOperation(java.lang.String instanceName, java.lang.String operation, org.json.JSONObject parameters) {
		org.json.JSONObject res = null;
		try {
			res =  controller.managerOperation(instanceName,operation,parameters);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		return res;
	}

	public void updateConfigurationFromPolicy(java.lang.String instanceName) {
		
		try {
			 controller.updateConfigurationFromPolicy(instanceName);
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

	public void runHealthTests() {
		
		try {
			 controller.runHealthTests();
		}
		catch (ManagementServerError e) {
			System.err.println("ERROR: " + e.getJson().toString(2));
		}
		
	}

}
