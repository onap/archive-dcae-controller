
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.service.common.docker.servers.manager;





import java.io.InputStream;

import org.openecomp.ncomp.sirius.manager.IRequestHandler;
import org.openecomp.ncomp.sirius.manager.ISwaggerHandler;
import org.openecomp.ncomp.sirius.manager.ISiriusPlugin;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;
import org.openecomp.ncomp.sirius.manager.ISiriusProvider;
import org.openecomp.ncomp.sirius.manager.ManagementServer;
import org.openecomp.ncomp.sirius.manager.SwaggerUtils;
import org.openecomp.ncomp.sirius.function.FunctionUtils;
import org.openecomp.ncomp.component.ApiRequestStatus;

import org.apache.log4j.Logger;

import org.openecomp.ncomp.sirius.manager.logging.NcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.json.JSONObject;

import java.util.Date;

import org.openecomp.dcae.controller.service.common.docker.servers.manager.logging.CommonDockerManagerOperationEnum;
import org.openecomp.dcae.controller.service.common.docker.servers.manager.logging.CommonDockerManagerMessageEnum;




import org.openecomp.dcae.controller.service.common.docker.manager.impl.CommonDockerManagerImpl;



public class DcaeCommonDockerManager extends CommonDockerManagerImpl implements ISiriusProvider {
	public static final Logger logger = Logger.getLogger(DcaeCommonDockerManager.class);
	static final NcompLogger ecomplogger = NcompLogger.getNcompLogger();
	public DcaeCommonDockerManagerProvider controller;
	ISiriusServer server;

	public DcaeCommonDockerManager(ISiriusServer server) {
		this.server = server;
		this.controller = new DcaeCommonDockerManagerProvider(server,this);
	}

	public org.openecomp.dcae.controller.core.service.HealthTestResponse test() {
		org.openecomp.dcae.controller.core.service.HealthTestResponse res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "test", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(CommonDockerManagerOperationEnum.CommonDockerManager_test,server,this);
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_test,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.test();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "test", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(CommonDockerManagerMessageEnum.REQUEST_FAILED_test, e.toString());
			EcompException e1 =  EcompException.create(CommonDockerManagerMessageEnum.REQUEST_FAILED_test,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, CommonDockerManagerMessageEnum.REQUEST_FAILED_test, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "test", ApiRequestStatus.OKAY, duration_);
		return res;
	}

	public void suspend() {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "suspend", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(CommonDockerManagerOperationEnum.CommonDockerManager_suspend,server,this);
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_suspend,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.suspend();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "suspend", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(CommonDockerManagerMessageEnum.REQUEST_FAILED_suspend, e.toString());
			EcompException e1 =  EcompException.create(CommonDockerManagerMessageEnum.REQUEST_FAILED_suspend,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, CommonDockerManagerMessageEnum.REQUEST_FAILED_suspend, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "suspend", ApiRequestStatus.OKAY, duration_);
		
	}

	public void resume() {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "resume", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(CommonDockerManagerOperationEnum.CommonDockerManager_resume,server,this);
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_resume,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.resume();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "resume", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(CommonDockerManagerMessageEnum.REQUEST_FAILED_resume, e.toString());
			EcompException e1 =  EcompException.create(CommonDockerManagerMessageEnum.REQUEST_FAILED_resume,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, CommonDockerManagerMessageEnum.REQUEST_FAILED_resume, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "resume", ApiRequestStatus.OKAY, duration_);
		
	}

	public java.lang.String publicKey() {
		java.lang.String res = null;
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "publicKey", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(CommonDockerManagerOperationEnum.CommonDockerManager_publicKey,server,this);
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_publicKey,"self:" + ManagementServer.object2ref(this));
		try {
			res =  controller.publicKey();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "publicKey", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(CommonDockerManagerMessageEnum.REQUEST_FAILED_publicKey, e.toString());
			EcompException e1 =  EcompException.create(CommonDockerManagerMessageEnum.REQUEST_FAILED_publicKey,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, CommonDockerManagerMessageEnum.REQUEST_FAILED_publicKey, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "publicKey", ApiRequestStatus.OKAY, duration_);
		return res;
	}

	public void configurationChanged() {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "configurationChanged", ApiRequestStatus.START, duration_);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(CommonDockerManagerOperationEnum.CommonDockerManager_configurationChanged,server,this);
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_configurationChanged,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.configurationChanged();
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "configurationChanged", ApiRequestStatus.ERROR, duration_);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(CommonDockerManagerMessageEnum.REQUEST_FAILED_configurationChanged, e.toString());
			EcompException e1 =  EcompException.create(CommonDockerManagerMessageEnum.REQUEST_FAILED_configurationChanged,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, CommonDockerManagerMessageEnum.REQUEST_FAILED_configurationChanged, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "configurationChanged", ApiRequestStatus.OKAY, duration_);
		
	}

	public void updateStreams(EList<org.openecomp.dcae.controller.core.stream.DcaeStream> inputStreams, EList<org.openecomp.dcae.controller.core.stream.DcaeStream> outputStreams) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "updateStreams", ApiRequestStatus.START, duration_,inputStreams,outputStreams);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(CommonDockerManagerOperationEnum.CommonDockerManager_updateStreams,server,this);
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_updateStreams,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.updateStreams(inputStreams,outputStreams);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "updateStreams", ApiRequestStatus.ERROR, duration_,inputStreams,outputStreams);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(CommonDockerManagerMessageEnum.REQUEST_FAILED_updateStreams, e.toString());
			EcompException e1 =  EcompException.create(CommonDockerManagerMessageEnum.REQUEST_FAILED_updateStreams,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, CommonDockerManagerMessageEnum.REQUEST_FAILED_updateStreams, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "updateStreams", ApiRequestStatus.OKAY, duration_,inputStreams,outputStreams);
		
	}








	public static void ecoreSetup() {
		DcaeCommonDockerManagerProvider.ecoreSetup();
	}
	public DcaeCommonDockerManagerProvider getSiriusProvider() {
		return controller;
	}
}
