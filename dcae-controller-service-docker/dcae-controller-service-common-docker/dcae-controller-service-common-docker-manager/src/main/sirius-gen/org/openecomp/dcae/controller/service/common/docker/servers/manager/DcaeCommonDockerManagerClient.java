
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.service.common.docker.servers.manager;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.dcae.controller.service.common.docker.manager.impl.CommonDockerManagerImpl;
import org.openecomp.dcae.controller.service.common.docker.manager.ManagerPackage;
import org.openecomp.dcae.controller.service.common.docker.servers.manager.logging.CommonDockerManagerOperationEnum;
import org.openecomp.dcae.controller.service.common.docker.servers.manager.logging.CommonDockerManagerMessageEnum;





 
@SuppressWarnings("unchecked")
public class DcaeCommonDockerManagerClient extends CommonDockerManagerImpl {
	public static final Logger logger = Logger.getLogger(DcaeCommonDockerManagerClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public DcaeCommonDockerManagerClient(String file, String name) {
		DcaeCommonDockerManager.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}

	public DcaeCommonDockerManagerClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}
	
	public DcaeCommonDockerManagerClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
		client.setVersion("ONAP-R2");
	}



	@Override
	public org.openecomp.dcae.controller.core.service.HealthTestResponse test() {
		EClass c = ManagerPackage.eINSTANCE.getCommonDockerManager(); 
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_test,client.getRemote());
		org.openecomp.dcae.controller.core.service.HealthTestResponse res;
		try {
		  res = (org.openecomp.dcae.controller.core.service.HealthTestResponse) client.operationPath("/resources", c, "test", null);
		}
		catch (Exception e) {
			ecomplogger.warn(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_test, e.toString());
			EcompException e1 = EcompException.create(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_test,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_test,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void suspend() {
		EClass c = ManagerPackage.eINSTANCE.getCommonDockerManager(); 
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_suspend,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "suspend", null);
		}
		catch (Exception e) {
			ecomplogger.warn(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_suspend, e.toString());
			EcompException e1 = EcompException.create(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_suspend,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_suspend,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void resume() {
		EClass c = ManagerPackage.eINSTANCE.getCommonDockerManager(); 
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_resume,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "resume", null);
		}
		catch (Exception e) {
			ecomplogger.warn(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_resume, e.toString());
			EcompException e1 = EcompException.create(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_resume,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_resume,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public java.lang.String publicKey() {
		EClass c = ManagerPackage.eINSTANCE.getCommonDockerManager(); 
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_publicKey,client.getRemote());
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath("/resources", c, "publicKey", null);
		}
		catch (Exception e) {
			ecomplogger.warn(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_publicKey, e.toString());
			EcompException e1 = EcompException.create(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_publicKey,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_publicKey,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void configurationChanged() {
		EClass c = ManagerPackage.eINSTANCE.getCommonDockerManager(); 
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_configurationChanged,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "configurationChanged", null);
		}
		catch (Exception e) {
			ecomplogger.warn(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_configurationChanged, e.toString());
			EcompException e1 = EcompException.create(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_configurationChanged,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_configurationChanged,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void updateStreams(EList<org.openecomp.dcae.controller.core.stream.DcaeStream> inputStreams, EList<org.openecomp.dcae.controller.core.stream.DcaeStream> outputStreams) {
		EClass c = ManagerPackage.eINSTANCE.getCommonDockerManager(); 
		ecomplogger.recordMetricEventStart(CommonDockerManagerOperationEnum.CommonDockerManager_updateStreams,client.getRemote());
		
		try {
		  client.operationPath("/resources", c, "updateStreams", null, inputStreams,outputStreams);
		}
		catch (Exception e) {
			ecomplogger.warn(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_updateStreams, e.toString());
			EcompException e1 = EcompException.create(CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_updateStreams,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR,CommonDockerManagerMessageEnum.REMOTE_CALL_FAILED_updateStreams,e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		
	}

}
