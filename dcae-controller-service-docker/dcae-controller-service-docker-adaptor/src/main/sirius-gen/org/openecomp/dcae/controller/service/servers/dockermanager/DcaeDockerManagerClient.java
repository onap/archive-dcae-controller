
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.dcae.controller.service.servers.dockermanager;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.GenericHttpClient;

import org.apache.log4j.Logger;

import org.openecomp.logger.EcompLogger;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.openecomp.dcae.controller.service.dockermanager.impl.DockerManagerImpl;
import org.openecomp.dcae.controller.service.dockermanager.DockermanagerPackage;
import org.openecomp.dcae.controller.service.servers.dockermanager.logging.DockerManagerOperationEnum;
import org.openecomp.dcae.controller.service.servers.dockermanager.logging.DockerManagerMessageEnum;





 
@SuppressWarnings("unchecked")
public class DcaeDockerManagerClient extends DockerManagerImpl {
	public static final Logger logger = Logger.getLogger(DcaeDockerManagerClient.class);
	static final EcompLogger ecomplogger = EcompLogger.getEcompLogger();
	public AbstractClient client;

	public DcaeDockerManagerClient(String file, String name) {
		DcaeDockerManager.ecoreSetup(); 
		client = new GenericHttpClient(file,name);
		client.add("/resources", this);
	}

	public DcaeDockerManagerClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/resources", this);
	}
	
	public DcaeDockerManagerClient(AbstractClient c) {
		client = c;
		client.add("/resources", this);
	}



	@Override
	public org.openecomp.dcae.controller.core.service.HealthTestResponse test() {
		EClass c = DockermanagerPackage.eINSTANCE.getDockerManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DockerManagerOperationEnum.REMOTE_test);
		org.openecomp.dcae.controller.core.service.HealthTestResponse res;
		try {
		  res = (org.openecomp.dcae.controller.core.service.HealthTestResponse) client.operationPath("/resources", c, "test", null);
		}
		catch (Exception e) {
			ecomplogger.warn(DockerManagerMessageEnum.REMOTE_test, e.toString());
			throw new RuntimeException("remote call failed:  test", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void suspend() {
		EClass c = DockermanagerPackage.eINSTANCE.getDockerManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DockerManagerOperationEnum.REMOTE_suspend);
		
		try {
		  client.operationPath("/resources", c, "suspend", null);
		}
		catch (Exception e) {
			ecomplogger.warn(DockerManagerMessageEnum.REMOTE_suspend, e.toString());
			throw new RuntimeException("remote call failed:  suspend", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void resume() {
		EClass c = DockermanagerPackage.eINSTANCE.getDockerManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DockerManagerOperationEnum.REMOTE_resume);
		
		try {
		  client.operationPath("/resources", c, "resume", null);
		}
		catch (Exception e) {
			ecomplogger.warn(DockerManagerMessageEnum.REMOTE_resume, e.toString());
			throw new RuntimeException("remote call failed:  resume", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public java.lang.String publicKey() {
		EClass c = DockermanagerPackage.eINSTANCE.getDockerManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DockerManagerOperationEnum.REMOTE_publicKey);
		java.lang.String res;
		try {
		  res = (java.lang.String) client.operationPath("/resources", c, "publicKey", null);
		}
		catch (Exception e) {
			ecomplogger.warn(DockerManagerMessageEnum.REMOTE_publicKey, e.toString());
			throw new RuntimeException("remote call failed:  publicKey", e);
		}
		ecomplogger.recordMetricEventEnd();
		return res;
	}

	@Override
	public void configurationChanged() {
		EClass c = DockermanagerPackage.eINSTANCE.getDockerManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DockerManagerOperationEnum.REMOTE_configurationChanged);
		
		try {
		  client.operationPath("/resources", c, "configurationChanged", null);
		}
		catch (Exception e) {
			ecomplogger.warn(DockerManagerMessageEnum.REMOTE_configurationChanged, e.toString());
			throw new RuntimeException("remote call failed:  configurationChanged", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

	@Override
	public void updateStreams(EList<org.openecomp.dcae.controller.core.stream.DcaeStream> inputStreams, EList<org.openecomp.dcae.controller.core.stream.DcaeStream> outputStreams) {
		EClass c = DockermanagerPackage.eINSTANCE.getDockerManager(); //foo
		ecomplogger.recordMetricEventStart();
		ecomplogger.setOperation(DockerManagerOperationEnum.REMOTE_updateStreams);
		
		try {
		  client.operationPath("/resources", c, "updateStreams", null, inputStreams,outputStreams);
		}
		catch (Exception e) {
			ecomplogger.warn(DockerManagerMessageEnum.REMOTE_updateStreams, e.toString());
			throw new RuntimeException("remote call failed:  updateStreams", e);
		}
		ecomplogger.recordMetricEventEnd();
		
	}

}
